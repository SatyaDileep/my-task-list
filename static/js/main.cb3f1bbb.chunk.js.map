{"version":3,"sources":["components/My-Task-List/index.js","components/My-Task-List/My-Task-List.jsx","App.js","serviceWorker.js","index.js"],"names":["MyTaskList","props","componentDidMount","getTasks","onChange","event","setState","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","map","item","index","color","cardBackground","background","taskComplete","textDecoration","Card","key","fluid","style","Content","Header","textAlign","wordWrap","Meta","Icon","link","onClick","updateTask","paddingRight","undoTask","deleteTask","splice","as","className","Form","this","Input","type","placeholder","Group","Component","App","React","useState","isReturningUser","savedMode","userPrefersDark","window","matchMedia","matches","getPrefColorScheme","getInitialMode","darkMode","setDarkMode","useEffect","checked","prevMode","id","htmlFor","Boolean","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb3f1bbb.chunk.js","sourcesContent":["import MyTaskList from \"./My-Task-List\";\r\n\r\nexport default MyTaskList;","import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\r\nimport \"./my-task-list.css\";\r\n\r\nclass MyTaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            task: \"\",\r\n            tasklist: []\r\n        };\r\n    }\r\n\r\n    // on load get the task list from storage\r\n    componentDidMount = () => {\r\n        this.getTasks();\r\n    };\r\n\r\n    onChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    // add task to the list\r\n    onSubmit = () => {\r\n        // check if task is empty string\r\n        if (this.state.task) {\r\n            // get the task list from local storage\r\n            let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n            // if tasklist is null there are no entries\r\n            // so create an empty list for it\r\n            if (tasklist == null) {\r\n                tasklist = [];\r\n            }\r\n        \r\n\r\n            // create task object default status is false\r\n            let task = {\r\n                task: `📄 ${this.state.task}`,\r\n                status: false\r\n            };\r\n            // add this to the tasklist\r\n            tasklist.push(task);\r\n\r\n            // save to localstorage\r\n            localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n            // clear the form\r\n            this.setState({\r\n                task: \"\"\r\n            });\r\n\r\n            // refresh the tasks\r\n            this.getTasks();\r\n        }\r\n    };\r\n\r\n    // get tasks function\r\n    getTasks = () => {\r\n        // get the task list from local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n\r\n        // check if task list empty\r\n        if (tasklist) {\r\n            // sort all tasks on the basis of status\r\n            // completed will be moved down\r\n            tasklist = tasklist.sort((a, b) => {\r\n                if (a.status) {\r\n                    return 1;\r\n                }\r\n                else if (b.status) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n            // save the task list in the local storage\r\n            localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n\r\n            // set the tasklist to the state\r\n            this.setState({\r\n                // default color\r\n                // incomplete => yello, complete : green\r\n                tasklist: tasklist.map((item, index) => {\r\n                    let color = \"yellow\";\r\n                    let cardBackground = { background: \"white\" };\r\n                    let taskComplete = { textDecoration: \"none\" };\r\n\r\n                    if (item.status) {\r\n                        color = \"green\";\r\n                        cardBackground.background = \"beige\";\r\n                        taskComplete[\"textDecoration\"] = \"line-through\";\r\n                    }\r\n\r\n                    return (\r\n                        <Card key={index} color={color} fluid style={cardBackground}>\r\n                            <Card.Content>\r\n                                <Card.Header textAlign=\"left\" style={taskComplete}>\r\n                                    <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\r\n                                </Card.Header>\r\n\r\n                                <Card.Meta textAlign=\"right\">\r\n                                    <Icon\r\n                                        link\r\n                                        name=\"check circle\"\r\n                                        color=\"green\"\r\n                                        onClick={() => this.updateTask(index)}\r\n                                    />\r\n                                    <span style={{ paddingRight: 10 }}>Done</span>\r\n                                    <Icon\r\n                                        link\r\n                                        name=\"undo\"\r\n                                        color=\"yellow\"\r\n                                        onClick={() => this.undoTask(index)}\r\n                                    />\r\n                                    <span style={{ paddingRight: 10 }}>Undo</span>\r\n                                    <Icon\r\n                                        link\r\n                                        name=\"delete\"\r\n                                        color=\"red\"\r\n                                        onClick={() => this.deleteTask(index)}\r\n                                    />\r\n                                    <span style={{ paddingRight: 10 }}>Delete</span>\r\n                                </Card.Meta>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    );\r\n                })\r\n            });\r\n        }\r\n    };\r\n\r\n    // update the task status to true\r\n    updateTask = index => {\r\n        // get the task from local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n\r\n        // change the status to true\r\n        tasklist[index].status = true;\r\n        // save the updated task list\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        //refresh the list in UI\r\n        this.getTasks();\r\n    };\r\n\r\n    // undo the task\r\n    undoTask = index => {\r\n        // get the task from local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n        // set status to false\r\n        tasklist[index].status = false;\r\n        // save to localstorage\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        //refresh the list in UI\r\n        this.getTasks();\r\n    };\r\n\r\n    // delete the task from the task list\r\n    deleteTask = index => {\r\n        // get the task list from the local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n        // remove the task from the task list\r\n        tasklist.splice(index, 1);\r\n        // save the updated task list\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        // refresh the task list\r\n        this.getTasks();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header as=\"h1\">\r\n                        \r\n                        \r\n                    </Header>\r\n                </div>\r\n                <div className=\"app-form\">\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"task\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.task}\r\n                            fluid\r\n                            placeholder=\"enter the task...\"\r\n                        />\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <Card.Group>{this.state.tasklist}</Card.Group>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MyTaskList;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MyTaskList from \"./components/My-Task-List\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = React.useState(getInitialMode());\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"dark\", JSON.stringify(darkMode));\r\n  }, [darkMode]);\r\n\r\n  function getInitialMode() {\r\n    const isReturningUser = \"dark\" in localStorage;\r\n    const savedMode = JSON.parse(localStorage.getItem(\"dark\"));\r\n    const userPrefersDark = getPrefColorScheme();\r\n    // if mode was saved --> dark / light\r\n    if (isReturningUser) {\r\n      return savedMode;\r\n      // if preferred color scheme is dark --> dark\r\n    } else if (userPrefersDark) {\r\n      return true;\r\n      // otherwise --> light\r\n    } else {\r\n      return false;\r\n    }\r\n    // return savedMode || false;\r\n  }\r\n\r\n  \r\n  function getPrefColorScheme() {\r\n    if (!window.matchMedia) return;\r\n\r\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n  }\r\n\r\n  return (\r\n    <div className={darkMode ? \"dark-mode\" : \"light-mode\"}>\r\n      <nav>\r\n        <div className=\"toggle-container\">\r\n          <h1>📝 My Task List</h1>\r\n          <span style={{ color: darkMode ? \"grey\" : \"yellow\" }}>☀︎</span>\r\n          <span className=\"toggle\">\r\n            <input\r\n              checked={darkMode}\r\n              onChange={() => setDarkMode(prevMode => !prevMode)}\r\n              id=\"checkbox\"\r\n              className=\"checkbox\"\r\n              type=\"checkbox\"\r\n            />\r\n            <label htmlFor=\"checkbox\"/>\r\n          </span>\r\n          <span style={{ color: darkMode ? \"slateblue\" : \"black\"}}>☾</span>\r\n          {/* <button onClick={() => setDarkMode(prevMode => !prevMode)}>\r\n          Toggle\r\n        </button> */}\r\n        </div>\r\n      </nav>\r\n      <main>\r\n        <MyTaskList></MyTaskList>\r\n      </main>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n/*ReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);*/\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}